{"ast":null,"code":"import axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport { GET_PROFILE, GET_PROFILES, PROFILE_ERROR, UPDATE_PROFILE, CLEAR_PROFILE, ACCOUNT_DELETED } from \"./types\"; // Get current users profile\n\nexport const getCurrentProfile = () => async dispatch => {\n  try {\n    const res = await axios.get(\"/api/profile/me\");\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get all profiles\n\nexport const getProfiles = () => async dispatch => {\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n\n  try {\n    const res = await axios.get(\"/api/profile\");\n    dispatch({\n      type: GET_PROFILES,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get profile by ID\n\nexport const getProfileById = userId => async dispatch => {\n  try {\n    const res = await axios.get(`/api/profile/user/${userId}`);\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // // Get Github repos\n// export const getGithubRepos = username => async dispatch => {\n//   try {\n//     const res = await axios.get(`/api/profile/github/${username}`);\n//     dispatch({\n//       type: GET_REPOS,\n//       payload: res.data\n//     });\n//   } catch (err) {\n//     dispatch({\n//       type: PROFILE_ERROR,\n//       payload: {\n//         msg: err.response.statusText,\n//         status: err.response.status\n//       }\n//     });\n//   }\n// };\n// Create or update profile\n\nexport const createProfile = (formData, history, edit = false) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const res = await axios.post(\"/api/profile\", formData, config);\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert(edit ? \"Profile Successfully Updated!\" : \"Profile Successfully Created!\", \"success\"));\n\n    if (!edit) {\n      history.push(\"/dashboard\");\n    }\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add Experience\n// export const addExperience = (formData, history) => async dispatch => {\n//   try {\n//     const config = {\n//       headers: {\n//         \"Content-Type\": \"application/json\"\n//       }\n//     };\n//     const res = await axios.put(\"/api/profile/experience\", formData, config);\n//     dispatch({\n//       type: UPDATE_PROFILE,\n//       payload: res.data\n//     });\n//     dispatch(setAlert(\"Experience Successfully Added!\", \"success\"));\n//     history.push(\"/dashboard\");\n//   } catch (err) {\n//     const errors = err.response.data.errors;\n//     if (errors) {\n//       errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n//     }\n//     dispatch({\n//       type: PROFILE_ERROR,\n//       payload: {\n//         msg: err.response.statusText,\n//         status: err.response.status\n//       }\n//     });\n//   }\n// };\n// // Add Education\n// export const addEducation = (formData, history) => async dispatch => {\n//   try {\n//     const config = {\n//       headers: {\n//         \"Content-Type\": \"application/json\"\n//       }\n//     };\n//     const res = await axios.put(\"/api/profile/education\", formData, config);\n//     dispatch({\n//       type: UPDATE_PROFILE,\n//       payload: res.data\n//     });\n//     dispatch(setAlert(\"Education Added\", \"success\"));\n//     history.push(\"/dashboard\");\n//   } catch (err) {\n//     const errors = err.response.data.errors;\n//     if (errors) {\n//       errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n//     }\n//     dispatch({\n//       type: PROFILE_ERROR,\n//       payload: {\n//         msg: err.response.statusText,\n//         status: err.response.status\n//       }\n//     });\n//   }\n// };\n// // Delete experience\n// export const deleteExperience = id => async dispatch => {\n//   try {\n//     const res = await axios.delete(`/api/profile/experience/${id}`);\n//     dispatch({\n//       type: UPDATE_PROFILE,\n//       payload: res.data\n//     });\n//     dispatch(setAlert(\"Experience Removed\", \"success\"));\n//   } catch (err) {\n//     dispatch({\n//       type: PROFILE_ERROR,\n//       payload: {\n//         msg: err.response.statusText,\n//         status: err.response.status\n//       }\n//     });\n//   }\n// };\n// // Delete education\n// export const deleteEducation = id => async dispatch => {\n//   try {\n//     const res = await axios.delete(`/api/profile/education/${id}`);\n//     dispatch({\n//       type: UPDATE_PROFILE,\n//       payload: res.data\n//     });\n//     dispatch(setAlert(\"Education Successfully Deleted!\", \"success\"));\n//   } catch (err) {\n//     dispatch({\n//       type: PROFILE_ERROR,\n//       payload: {\n//         msg: err.response.statusText,\n//         status: err.response.status\n//       }\n//     });\n//   }\n// };\n// Delete account & profile\n\nexport const deleteAccount = () => async dispatch => {\n  if (window.confirm(\"Are you sure? This can NOT be undone!\")) {\n    try {\n      await axios.delete(\"/api/profile\");\n      dispatch({\n        type: CLEAR_PROFILE\n      });\n      dispatch({\n        type: ACCOUNT_DELETED\n      });\n      dispatch(setAlert(\"Your account has been permanently deleted!\"));\n    } catch (err) {\n      dispatch({\n        type: PROFILE_ERROR,\n        payload: {\n          msg: err.response.statusText,\n          status: err.response.status\n        }\n      });\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/User/Desktop/Scart1/client/src/actions/profile.js"],"names":["axios","setAlert","GET_PROFILE","GET_PROFILES","PROFILE_ERROR","UPDATE_PROFILE","CLEAR_PROFILE","ACCOUNT_DELETED","getCurrentProfile","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","getProfiles","getProfileById","userId","createProfile","formData","history","edit","config","headers","post","push","errors","forEach","error","deleteAccount","window","confirm","delete"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\n\r\nimport { setAlert } from \"./alert\";\r\n\r\nimport {\r\n\r\n  GET_PROFILE,\r\n  GET_PROFILES,\r\n  PROFILE_ERROR,\r\n  UPDATE_PROFILE,\r\n  CLEAR_PROFILE,\r\n  ACCOUNT_DELETED\r\n} from \"./types\";\r\n\r\n// Get current users profile\r\nexport const getCurrentProfile = () => async dispatch => {\r\n\r\n  try {\r\n    const res = await axios.get(\"/api/profile/me\");\r\n\r\n    dispatch({\r\n      type: GET_PROFILE,\r\n      payload: res.data\r\n    });\r\n\r\n  } catch (err) {\r\n    dispatch({\r\n      type: PROFILE_ERROR,\r\n      payload: {\r\n        msg: err.response.statusText,\r\n        status: err.response.status\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\n// Get all profiles\r\nexport const getProfiles = () => async dispatch => {\r\n\r\n  dispatch({ type: CLEAR_PROFILE });\r\n\r\n  try {\r\n    const res = await axios.get(\"/api/profile\");\r\n\r\n    dispatch({\r\n      type: GET_PROFILES,\r\n      payload: res.data\r\n    });\r\n\r\n  } catch (err) {\r\n    dispatch({\r\n      type: PROFILE_ERROR,\r\n      payload: {\r\n        msg: err.response.statusText,\r\n        status: err.response.status\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\n// Get profile by ID\r\nexport const getProfileById = userId => async dispatch => {\r\n\r\n  try {\r\n    const res = await axios.get(`/api/profile/user/${userId}`);\r\n\r\n    dispatch({\r\n      type: GET_PROFILE,\r\n      payload: res.data\r\n    });\r\n  \r\n  } catch (err) {\r\n    dispatch({\r\n      type: PROFILE_ERROR,\r\n      payload: {\r\n        msg: err.response.statusText,\r\n        status: err.response.status\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\n// // Get Github repos\r\n// export const getGithubRepos = username => async dispatch => {\r\n\r\n//   try {\r\n//     const res = await axios.get(`/api/profile/github/${username}`);\r\n\r\n//     dispatch({\r\n//       type: GET_REPOS,\r\n//       payload: res.data\r\n//     });\r\n\r\n//   } catch (err) {\r\n//     dispatch({\r\n//       type: PROFILE_ERROR,\r\n//       payload: {\r\n//         msg: err.response.statusText,\r\n//         status: err.response.status\r\n//       }\r\n//     });\r\n//   }\r\n// };\r\n\r\n// Create or update profile\r\nexport const createProfile = (\r\n  formData,\r\n  history,\r\n  edit = false\r\n) => async dispatch => {\r\n  try {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    };\r\n\r\n    const res = await axios.post(\"/api/profile\", formData, config);\r\n\r\n    dispatch({\r\n      type: GET_PROFILE,\r\n      payload: res.data\r\n    });\r\n\r\n    dispatch(setAlert(edit\r\n      ? \"Profile Successfully Updated!\"\r\n      : \"Profile Successfully Created!\",\r\n        \"success\"\r\n    ));\r\n\r\n    if (!edit) {\r\n      history.push(\"/dashboard\");\r\n    }\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n\r\n    if (errors) {\r\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\r\n    }\r\n\r\n    dispatch({\r\n      type: PROFILE_ERROR,\r\n      payload: {\r\n        msg: err.response.statusText,\r\n        status: err.response.status\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\n// Add Experience\r\n// export const addExperience = (formData, history) => async dispatch => {\r\n\r\n//   try {\r\n//     const config = {\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\"\r\n//       }\r\n//     };\r\n\r\n//     const res = await axios.put(\"/api/profile/experience\", formData, config);\r\n\r\n//     dispatch({\r\n//       type: UPDATE_PROFILE,\r\n//       payload: res.data\r\n//     });\r\n\r\n//     dispatch(setAlert(\"Experience Successfully Added!\", \"success\"));\r\n\r\n//     history.push(\"/dashboard\");\r\n//   } catch (err) {\r\n//     const errors = err.response.data.errors;\r\n\r\n//     if (errors) {\r\n//       errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\r\n//     }\r\n\r\n//     dispatch({\r\n//       type: PROFILE_ERROR,\r\n//       payload: {\r\n//         msg: err.response.statusText,\r\n//         status: err.response.status\r\n//       }\r\n//     });\r\n//   }\r\n// };\r\n\r\n// // Add Education\r\n// export const addEducation = (formData, history) => async dispatch => {\r\n\r\n//   try {\r\n//     const config = {\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\"\r\n//       }\r\n//     };\r\n\r\n//     const res = await axios.put(\"/api/profile/education\", formData, config);\r\n\r\n//     dispatch({\r\n//       type: UPDATE_PROFILE,\r\n//       payload: res.data\r\n//     });\r\n\r\n//     dispatch(setAlert(\"Education Added\", \"success\"));\r\n\r\n//     history.push(\"/dashboard\");\r\n//   } catch (err) {\r\n//     const errors = err.response.data.errors;\r\n\r\n//     if (errors) {\r\n//       errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\r\n//     }\r\n\r\n//     dispatch({\r\n//       type: PROFILE_ERROR,\r\n//       payload: {\r\n//         msg: err.response.statusText,\r\n//         status: err.response.status\r\n//       }\r\n//     });\r\n//   }\r\n// };\r\n\r\n// // Delete experience\r\n// export const deleteExperience = id => async dispatch => {\r\n\r\n//   try {\r\n//     const res = await axios.delete(`/api/profile/experience/${id}`);\r\n\r\n//     dispatch({\r\n//       type: UPDATE_PROFILE,\r\n//       payload: res.data\r\n//     });\r\n\r\n//     dispatch(setAlert(\"Experience Removed\", \"success\"));\r\n\r\n//   } catch (err) {\r\n//     dispatch({\r\n//       type: PROFILE_ERROR,\r\n//       payload: {\r\n//         msg: err.response.statusText,\r\n//         status: err.response.status\r\n//       }\r\n//     });\r\n//   }\r\n// };\r\n\r\n// // Delete education\r\n// export const deleteEducation = id => async dispatch => {\r\n\r\n//   try {\r\n//     const res = await axios.delete(`/api/profile/education/${id}`);\r\n\r\n//     dispatch({\r\n//       type: UPDATE_PROFILE,\r\n//       payload: res.data\r\n//     });\r\n\r\n//     dispatch(setAlert(\"Education Successfully Deleted!\", \"success\"));\r\n\r\n//   } catch (err) {\r\n//     dispatch({\r\n//       type: PROFILE_ERROR,\r\n//       payload: {\r\n//         msg: err.response.statusText,\r\n//         status: err.response.status\r\n//       }\r\n//     });\r\n//   }\r\n// };\r\n\r\n// Delete account & profile\r\nexport const deleteAccount = () => async dispatch => {\r\n\r\n  if (window.confirm(\"Are you sure? This can NOT be undone!\")) {\r\n    try {\r\n      await axios.delete(\"/api/profile\");\r\n\r\n      dispatch({ type: CLEAR_PROFILE });\r\n      dispatch({ type: ACCOUNT_DELETED });\r\n\r\n      dispatch(setAlert(\"Your account has been permanently deleted!\"));\r\n\r\n    } catch (err) {\r\n      dispatch({\r\n        type: PROFILE_ERROR,\r\n        payload: {\r\n          msg: err.response.statusText,\r\n          status: err.response.status\r\n        }\r\n      });\r\n    }\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}